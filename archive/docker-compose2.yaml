version: '3.9'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow_net

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow_net

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    hostname: kafka-learn
    container_name: kafka-learn
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "echo 'test' | nc -w 1 localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - airflow_net

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper-learn
    container_name: zookeeper-learn
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - airflow_net

  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    ports:
      - "9003:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      - kafka
    networks:
      - airflow_net

  hive-metastore:
    container_name: hive_metastore
    image: ofrir119/hive-metastore:1.0
    platform: linux/amd64
    ports:
      - "9083:9083"
    depends_on:
      - postgres
    networks:
      - airflow_net

  dev_env:
    container_name: dev_env
    build:
      context: .
      dockerfile: Dockerfile.dev_env
    platform: linux/amd64
    ports:
      - "22022:22"
      - "8888:8888"
      - "4040:4040"
      - "4041:4041"
      - "4042:4042"
    volumes:
      - ./spark_jobs:/opt/spark_jobs
    networks:
      - airflow_net


  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SPARK_VERSION: 3.2.0
        HADOOP_VERSION: 3.2
    container_name: airflow_webserver
    environment:
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      SPARK_HOME: /opt/spark-3.2.0-bin-hadoop3.2
      PYSPARK_PYTHON: /usr/bin/python3
      PYSPARK_DRIVER_PYTHON: /usr/bin/python3
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: webserver
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - airflow_net

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_scheduler
    environment:
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      SPARK_HOME: /opt/spark-3.2.0-bin-hadoop3.2
      PYSPARK_PYTHON: /usr/bin/python3
      PYSPARK_DRIVER_PYTHON: /usr/bin/python3
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - airflow_net

  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_worker
    environment:
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      SPARK_HOME: /opt/spark-3.2.0-bin-hadoop3.2
      PYSPARK_PYTHON: /usr/bin/python3
      PYSPARK_DRIVER_PYTHON: /usr/bin/python3
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: celery worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - airflow_net

volumes:
  postgres-db-volume:
    driver: local
  minio_data:
    driver: local

networks:
  airflow_net:
    driver: bridge